#include<Servo.h>
Servo myservo;
int vel=50;

//********************************Variables para Configuración AccessPoint*********************
#include <WiFi.h>
const char* ssid     = "ESP32-Access-Point";
const char* password = "123456789";
WiFiServer server(80);
String header;

#define PE1 digitalRead(pe1)
#define PE2 digitalRead(pe2)

// DECLARACION DE VARIABLES PARA PINES
const int pe1 = 23;
const int pe2 = 5;
const int pintrigger = 22;
const int pinled = 13;
 
// VARIABLES PARA CALCULOS
unsigned int distancia1, distancia2;

const int DIP1 = 2; //Interruptor 1 del DipSwitch
const int DIP2 = 3; //Interruptor 2 del DipSwitch
const int DIP3 = 4; //Interruptor 3 del DipSwitch
const int DIP4 = 5; //Interruptor 4 del DipSwitch

const int pinENA = 6; // Permite el control del motor A
const int pinIN1 = 7; // controla sentido del motor A
const int pinIN2 = 8; // controla sentido del motor A
const int pinIN3 = 9; // controla sentido del motor B
const int pinIN4 = 10; // controla sentido del motor B
const int pinENB = 11; // Permite el control del motor B

int velocidad=200;      //velocidad de giro

const int pinMotorA[3] = { pinENA, pinIN1, pinIN2 };
const int pinMotorB[3] = { pinENB, pinIN3, pinIN4 };

int freno = 0;
int movimiento = 0;
int giro = 0;
int espiral = 0;

void setup() {
  Serial.begin(9600);   //iniciar puerto serie
  pinMode(DIP1, INPUT); //definir DIP1 como entrada
  pinMode(DIP2, INPUT); //definir DIP2 como entrada
  pinMode(DIP3, INPUT); //definir DIP3 como entrada
  pinMode(DIP4, INPUT); //definir DIP4 como entrada

  pinMode(pinIN1, OUTPUT); //definir pinIN1 como salida
  pinMode(pinIN2, OUTPUT); //definir pinIN2 como salida
  pinMode(pinENA, OUTPUT); //definir pinENA como salida
  pinMode(pinIN3, OUTPUT); //definir pinIN3 como salida
  pinMode(pinIN4, OUTPUT); //definir pinIN4 como salida
  pinMode(pinENB, OUTPUT); //definir pinENB como salida

  // PREPARAR LA COMUNICACION SERIAL
  //Serial.begin(9600);
  // CONFIGURAR PINES DE ENTRADA Y SALIDA
  pinMode(pe1, INPUT);
  pinMode(pe2, INPUT);
  pinMode(pintrigger, OUTPUT);
  pinMode(pinled, OUTPUT);

  accessPointInit();

  myservo.attach(9);
}
void loop(){
  freno = digitalRead(DIP1);  //lectura digital de pin
  movimiento = digitalRead(DIP2);  //lectura digital de pin
  giro = digitalRead(DIP3);  //lectura digital de pin
  espiral = digitalRead(DIP4);  //lectura digital de pin

  int modo[4] = { freno, movimiento, giro, espiral}; //Agrupamos los valores en un arreglo

  int estado = movimientoMotores(modo); //Emplemos el arreglo como argumento de la función movimientoMotores

  switch(estado)
  {
    case 1:
      //Freno activado
      Serial.println("El freno está activo");
      fullStop(pinMotorA, pinMotorB);
      break;
      
    case 2:
      //Movimiento hacia delante y hacia atrás
      
      Serial.println("El robot se mueve haca adelante y atrás");

      velocidad = 200;
      
      moveForward(pinMotorA, velocidad);
      moveForward(pinMotorB, velocidad);
      
      
      break;
      
    case 3:
      //Giro
      Serial.println("El robot está girando");

      giroDerecha(pinMotorA, pinMotorB);
      delay(1000);
      giroIzquierda(pinMotorA, pinMotorB);
      delay(1000);
      
      break;

    case 4:
      //Espiral
      Serial.println("El robot se mueve en espiral");
      break;

    default:
      //Aqui no llega
      break;
  }
  delay(1000);
}

int movimientoMotores(int estado[4])
{
  int a;
  if( estado[0] == 0)
  {
    a = 1; //Estado 1: Freno
  }

  else if( estado[0] == 1 && estado[1] == 1 && estado[2] == 0 && estado[3] == 0 )
  {
    a = 2; //Estado 2: Adelante-atrás
  }

  else if( estado[0] == 1 && estado[1] == 0 && estado[2] == 1 && estado[3] == 0 )
  {
    a = 3; // Estado3: Giro
  }

  else if( estado[0] == 1 && estado[1] == 0 && estado[2] == 0 && estado[3] == 1 )
  {
    a = 4; //Estado 4 : Espiral
  }

  else
  {
    a = 1; //Estado no definido, se obliga a frenar
  }

  return a;
  
}

void fullStop(const int pinMotor1[3], const int pinMotor2[3])
{
   digitalWrite(pinMotor1[1], LOW);
   digitalWrite(pinMotor1[2], LOW);
   digitalWrite(pinMotor2[1], LOW);
   digitalWrite(pinMotor2[2], LOW);

   analogWrite(pinMotor1[0], 0);
   analogWrite(pinMotor2[0], 0);
}

void moveForward(const int pinMotor[3], int speed)
{
   digitalWrite(pinMotor[1], HIGH);
   digitalWrite(pinMotor[2], LOW);

   analogWrite(pinMotor[0], speed);
}

void moveBackward(const int pinMotor[3], int speed)
{
   digitalWrite(pinMotor[1], LOW);
   digitalWrite(pinMotor[2], HIGH);

   analogWrite(pinMotor[0], speed);
}

void giroDerecha(const int pinMotor1[3], const int pinMotor2[3])
{
  moveForward(pinMotor1, 200);
  moveBackward(pinMotor2, 100);
}

void giroIzquierda(const int pinMotor1[3], const int pinMotor2[3])
{
  moveForward(pinMotor1, 100);
  moveBackward(pinMotor2, 200);
}

void lecObs() {
  // ENVIAR PULSO DE DISPARO EN EL PIN "TRIGGER"
  digitalWrite(pintrigger, LOW);
  delayMicroseconds(2);
  digitalWrite(pintrigger, HIGH);
  // EL PULSO DURA AL MENOS 10 uS EN ESTADO ALTO
  delayMicroseconds(10);
  digitalWrite(pintrigger, LOW);

unsigned int y1 = 0;
unsigned int y2 = 0;
unsigned int y3 = 0;
unsigned int y4 = 0;


  b00:
  if(PE1 == LOW && PE2 == LOW){
    delayMicroseconds(1);
    goto b00;
  }

  bi:
    if(PE1 == HIGH){
      y1++;
    }
    if(PE2 == HIGH){
      y2++;
    }
    //Descomentar para usar cuatro sensores
    /*if(PE3 == HIGH){
      y3++;
    }
    if(PE4 == HIGH){
      y4++;
    }*/

    if(PE1 == LOW && PE2 == LOW){
    //Descomentar para usar cuatro sensores
    //if(PE1 == LOW && PE2 == LOW && PE3 == LOW && PE4 == LOW){ 
      goto bf;
    }
  
  delayMicroseconds(1);
  goto bi;
  bf:

  //Por calibraciÃ³n, 20 fue el mejor valor, al menos de manera preliminar... 
  distancia1 = y1 / 20;
  distancia2 = y2 / 20; 
 
  //Serial
  Serial.print(distancia1);
  Serial.print(" --cm[1] ");
  Serial.print(distancia2);
  Serial.println(" --cm[2] ");
  delay(200);
 
}

void accessPointInit(){
  WiFi.softAP(ssid, password);
  Serial.print("AccessPoint IP address: ");
  Serial.println(WiFi.softAPIP());
  server.begin();
}

int visionPelotas()
{
int ball;
WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
     
            if (header.indexOf("right") >= 0){ 
              Serial.println("Pelota a la derecha");
              ball=1;
            }
            if (header.indexOf("left") >= 0){ 
              Serial.println("Pelota a la izquierda");
              ball=2;
            }
            if (header.indexOf("null") >= 0) {
              Serial.println("NO se detecta pelota");
              ball=3;
            }
            if (header.indexOf("center") >= 0){
              Serial.println("Pelota en el centro");
              ball=0;
            }
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
  return ball;
}

void aspas(){
  myservo.write(vel);
}
